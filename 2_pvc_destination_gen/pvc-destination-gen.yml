---
- hosts: localhost
  vars_files:
    - vars/defaults.yml
    - vars/storage-class-mappings.yml
  tasks:
    - import_tasks: ../common/assert-kubeconfig.yml
      tags:
      - assert_kubeconfig
      - precheck
      - stage_b

    - import_tasks: ../common/assert-vars.yml
      tags:
      - stage_b

    - tags:
      - assert_sc_mapping
      - precheck
      - stage_b
      block:
        - name: "Get list of user provided destination storage-classes"
          set_fact:
            user_storage_classes: "{{ mig_storage_class_mappings.values() | list | unique }}"

        - name: "Get list of available storage classes"
          k8s_info:
            api_version: storage.k8s.io/v1
            kind: StorageClass
          register: storage_classes

        - name: "Create list of available storage classes"
          vars:
            available_storage_classes: []
          set_fact:
            available_storage_classes: "{{ available_storage_classes + [item.metadata.name] }}"
          loop: "{{ storage_classes.resources }}"

        - fail:
            msg: "One or more storage class mappings are invalid. Exiting..."
          when: "{{ (user_storage_classes | difference(available_storage_classes)) | length > 0 }}"

    - tags:
      - load_vars
      - stage_b
      set_fact:
        pvc_data: "{{ lookup('file', pvc_data_filepath) | from_json }}"

    - name: "Convert storage class"
      vars:
        mig_converted_sc:
          storage_class: "{{-
            mig_storage_class_mappings.get(
            my_item.1.storage_class+'_'+('RWX' if 'ReadWriteMany' in my_item.1.access_modes
                                   else ('ROX' if 'ReadOnlyMany' in my_item.1.access_modes
                                   else  'RWO')),
            'ocs-storagecluster-ceph-rbd')
            -}}"
      set_fact:
        mig_dest_pvc_data: "{{ mig_dest_pvc_data + [(my_item.1 | combine(mig_converted_sc, recursive=true))] }}"
      loop: "{{ pvc_data|subelements('pvcs') }}"
      loop_control:
        loop_var: my_item

    - name: "Create pvcs on destination namespace"
      include_tasks:
        file: tasks/ensure-pvc.yml
        apply:
          tags:
          - ensure_pvcs
          - stage_b
      loop: "{{ mig_dest_pvc_data }}"
      loop_control:
        loop_var: outer_item
      tags:
      - stage_b
