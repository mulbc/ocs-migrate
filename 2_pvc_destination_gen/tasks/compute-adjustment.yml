# Required Input :
#   pvc_name (string)      : name of the current pvc
#   bound_pod_uid (string) : uid of the pod the current pvc is bound to
#   volume_name (string)   : name of the volume in the pod which the current PVC is used for
#   capacity (string)      : capacity of the current pvc in k8s units
#   namespace (string)     : ns of the current PVC

# TODO: pv mount location should be dynamically generated from a pre-defined set of mappings for different scs
- set_fact:
    mig_source_data_base_location: "/var/lib/origin/openshift.local.volumes"
    mig_source_pv_mount: "kubernetes.io~glusterfs"
    should_continue_estimation: false
    sizing_adjustment_needed: false
    # enum to represent sizing adjustment type
    # Type 1 : When PV is almost full, we grow it by certain percentage
    # Type 2 : When PV is grown out of k8s, we choose the actual volume size
    volume_adjustment_type:
      type_one:
        msg: "PV was identified to be full or close-to-full. pvc-migrate grew the original size by {{ full_volume_grow_percentage|int }}%."
      type_two:
        msg: "A mismatch between the actual volume size and the requested PVC size was found. pvc-migrate used the highest of both the values."

- set_fact:
    mig_source_pv_location: "{{ mig_source_data_base_location }}/pods/{{ bound_pod_uid }}/volumes/{{ mig_source_pv_mount }}/{{ volume_name }}/"

- block:
  - name: "Reading sizing information on {{ pvc_name }}"
    set_fact:
      matched_capacity: "{{ capacity | regex_findall(pvc_size_supported_conversion_units_pattern) | flatten }}"

  - name: "Converting size info into compatible units"
    set_fact:
      pvc_capacity_int: "{{ matched_capacity[0] | int }}"
      pvc_capacity_unit: "{{ matched_capacity[1] }}"
    when:
    - matched_capacity is defined
    - matched_capacity[0] is defined
    - matched_capacity[1] is defined
    ignore_errors: true

  - name: "Determining whether automatic sizing adjustment can be done for {{ pvc_name }}"
    set_fact:
      should_continue_estimation: true
    when:
    - pvc_capacity_int is defined
    - pvc_capacity_unit is defined

- when: not should_continue_estimation
  debug:
    msg: "The size for {{ pvc_name }} cannot be adjusted automatically as the SI unit for the PVC is not currently supported."

- when: should_continue_estimation | default(false)
  tags:
  - pv_size_estimation
  become: yes
  block:
  - name: "Reading the disk usage on the source node"
    shell: "df -B{{ pvc_size_conversion_base_unit }} {{ mig_source_pv_location }} | awk 'NR>1 { print $2,$3,$5 }'"
    register: df_output

  - when: df_output.stdout.split(' ') | default([]) | length == 3
    vars:
      df_output_columns: "{{ df_output.stdout.split(' ') }}"
    block:
    - name: "Collecting actual size of the volume"
      set_fact:
        actual_vol_size: "{{ df_output_columns[0].replace(pvc_size_conversion_base_unit, '') | int }}"
        actual_used_vol_size: "{{ df_output_columns[1].replace(pvc_size_conversion_base_unit, '') | int }}"
        actual_used_vol_percentage: "{{ df_output_columns[2].replace('%', '') | int }}"

    - name: "Normalizing sizing data"
      set_fact:
        normalized_pvc_size: "{{ pvc_capacity_int|int * pvc_size_multiplier_mappings.get(pvc_capacity_unit)|int }}"
        used_vol_size_grown: "{{ (actual_used_vol_size|float * (1.00|float + full_volume_grow_percentage|float/100.00)) }}"
      ignore_errors: true

    - name: "Determining whether sizing adjustment is needed for {{ pvc_name }} [1]"
      set_fact:
        sizing_adjustment_needed: true
        sizing_adjustment_type: "{{ volume_adjustment_type.type_one }}"
      when: used_vol_size_grown|int > normalized_pvc_size|int

    - name: "Determining whether sizing adjustment is needed for {{ pvc_name }} [2]"
      set_fact:
        sizing_adjustment_needed: true
        sizing_adjustment_type: "{{ volume_adjustment_type.type_two }}"
      when:
      - not sizing_adjustment_needed
      - normalized_pvc_size|int < actual_vol_size|int

- when:
  - sizing_adjustment_needed
  block:
  - name: "Attempting to compute new adjusted volume size as the size of the actual volume is bigger than that of requested in the PVC"
    vars:
      approximated_unit: "{{ pvc_size_approx_mappings.get(pvc_capacity_unit) }}"
      normalized_pvc_size: "{{ pvc_capacity_int|int * pvc_size_multiplier_mappings.get(approximated_unit) }}"
    set_fact:
      adjusted_volume_size: "{{ [(used_vol_size_grown|int / pvc_size_multiplier_mappings.get(approximated_unit)|float), (actual_vol_size|float / pvc_size_multiplier_mappings.get(approximated_unit)|float), normalized_pvc_size|int ] | max | round(0, 'ceil') | int }}"
      adjusted_volume_unit: "{{ approximated_unit }}"

- when:
  - sizing_adjustment_needed
  block:
  - name: "Update '{{ pvc_name }}' definition with adjusted volume size"
    vars:
      updated_pvc_object:
        pvc_namespace: "{{ namespace }}"
        pvc_name: "{{ pvc_name }}"
        adjusted_pvc_capacity: "{{ adjusted_volume_size|string + adjusted_volume_unit|string }}"
        original_volume_usage: "{{ actual_used_vol_percentage|int|string }}%"
        original_pvc_capacity: "{{ pvc_capacity_int|string + pvc_capacity_unit|string }}"
        actual_pv_size: "{{ actual_vol_size }}{{ pvc_size_conversion_base_unit }}"
        reason: "{{ sizing_adjustment_type.msg }}"
    set_fact:
      adjusted_volumes: "{{ adjusted_volumes + [updated_pvc_object] }}"
